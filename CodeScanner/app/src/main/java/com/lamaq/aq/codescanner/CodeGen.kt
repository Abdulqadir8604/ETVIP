package com.lamaq.aq.codescanner

import android.annotation.SuppressLint
import android.app.DownloadManager
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.os.Environment
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.selection.selectable
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ElevatedButton
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedCard
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Snackbar
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.graphics.vector.rememberVectorPainter
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import coil.compose.rememberImagePainter
import com.lamaq.aq.codescanner.ui.theme.CodeScannerTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class CodeGen : ComponentActivity() {
    @SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val qrCodeApi = "https://api.qrserver.com/v1/create-qr-code/?size=150x150&"
        val scope = CoroutineScope(Dispatchers.Default)

        setContent {
            var imageUri by remember { mutableStateOf<Uri?>(null) }

            val painter = rememberImagePainter(
                data = imageUri,
                builder = {
                    crossfade(true)
                }
            )
            var codeGenerated by remember {
                mutableStateOf(false)
            }

            CodeScannerTheme {
                val snackbarHostState = remember { SnackbarHostState() }

                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.primary,
                ) {
                    var inputValue by remember {
                        mutableStateOf("")
                    }
                    Scaffold(
                        snackbarHost = {
                            SnackbarHost(hostState = snackbarHostState) {
                                Snackbar(
                                    snackbarData = it,
                                    containerColor = MaterialTheme.colorScheme.secondaryContainer,
                                    contentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                                )
                            }
                        },
                        modifier = Modifier.fillMaxSize(),
                        content = {
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .wrapContentHeight()
                                    .padding(10.dp),
                                horizontalArrangement = Arrangement.SpaceBetween,
                                verticalAlignment = Alignment.CenterVertically,
                            ) {
                                IconButton(
                                    modifier = Modifier
                                        .clip(MaterialTheme.shapes.large)
                                        .background(MaterialTheme.colorScheme.secondaryContainer)
                                        .align(Alignment.CenterVertically),
                                    onClick = {
                                        val intent = Intent(
                                            this@CodeGen,
                                            MainActivity::class.java
                                        )
                                        startActivity(intent)
                                    }) {
                                    Icon(
                                        painter = painterResource(
                                            id = R.drawable.baseline_keyboard_backspace_24
                                        ),
                                        contentDescription = "back"
                                    )
                                }
                                Text(
                                    text = "Code Generator",
                                    style = MaterialTheme.typography.headlineMedium,
                                    modifier = Modifier
                                        .align(Alignment.CenterVertically)
                                        .padding(10.dp)
                                )
                                Box(
                                    modifier = Modifier
                                        .clip(MaterialTheme.shapes.large)
                                        .background(MaterialTheme.colorScheme.primaryContainer)
                                        .align(Alignment.CenterVertically)
                                ) {
                                    Row {
                                        IconButton(
                                            enabled = codeGenerated,
                                            onClick = {
                                                val intent = Intent(
                                                    Intent.ACTION_VIEW,
                                                    imageUri
                                                )
                                                startActivity(intent)
                                            }) {
                                            Icon(
                                                painter = painterResource(
                                                    id = R.drawable.baseline_open_in_browser_24
                                                ),
                                                contentDescription = "view in browser"
                                            )
                                        }
                                        IconButton(
                                            enabled = codeGenerated,
                                            onClick = {
                                                saveImageToDownloads(
                                                    this@CodeGen,
                                                    imageUri!!
                                                )
                                            }) {
                                            Icon(
                                                painter = painterResource(
                                                    id = R.drawable.baseline_file_download_24
                                                ),
                                                contentDescription = "download qr image"
                                            )
                                        }
                                    }
                                }
                            }
                            Column(
                                modifier = Modifier.fillMaxSize(),
                                horizontalAlignment = Alignment.CenterHorizontally,
                                verticalArrangement = Arrangement.Center,
                            ) {
                                Image(
                                    painter = painter,
                                    contentDescription = "Generated QR Code",
                                    modifier = Modifier
                                        .padding(10.dp)
                                        .width(150.dp)
                                        .height(150.dp)
                                        .align(Alignment.CenterHorizontally)
                                )
                                Spacer(modifier = Modifier.height(10.dp))
                                OutlinedCard(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .wrapContentHeight()
                                        .padding(20.dp),
                                    elevation = CardDefaults.cardElevation(4.dp),
                                    shape = MaterialTheme.shapes.medium,
                                    colors = CardDefaults.outlinedCardColors(
                                        containerColor = MaterialTheme.colorScheme.secondaryContainer,
                                        contentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                                    ),
                                    border = BorderStroke(
                                        width = 2.dp,
                                        color = MaterialTheme.colorScheme.onPrimaryContainer,
                                    ),
                                ) {
                                    Column(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .wrapContentHeight()
                                            .padding(20.dp),
                                        horizontalAlignment = Alignment.CenterHorizontally,
                                        verticalArrangement = Arrangement.Center,
                                    ) {
                                        Box(
                                            modifier = Modifier
                                                .align(Alignment.CenterHorizontally)
                                        ) {
                                            TextField(
                                                value = inputValue,
                                                trailingIcon = {
                                                    val clearIcon: Painter = rememberVectorPainter(
                                                        image = ImageVector.vectorResource(
                                                            id = R.drawable.clear_icon
                                                        ),
                                                    )
                                                    Image(
                                                        painter = clearIcon,
                                                        contentDescription = "Clear",
                                                        modifier = Modifier
                                                            .padding(10.dp)
                                                            .width(24.dp)
                                                            .height(24.dp)
                                                            .selectable(
                                                                selected = false,
                                                                onClick = {
                                                                    inputValue = ""
                                                                }
                                                            )
                                                    )
                                                },
                                                onValueChange = {
                                                    inputValue = it
                                                },
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .wrapContentHeight()
                                                    .padding(10.dp)
                                                    .selectable(
                                                        selected = false,
                                                        onClick = {
                                                            val intent = Intent(
                                                                this@CodeGen,
                                                                MainActivity::class.java
                                                            )
                                                            startActivity(intent)
                                                        }
                                                    ),

                                                label = {
                                                    Text(
                                                        text = "Enter Value",
                                                        textAlign = TextAlign.Center,
                                                        style = MaterialTheme.typography.bodyLarge
                                                    )
                                                },
                                                colors = TextFieldDefaults.textFieldColors(
                                                    textColor = MaterialTheme.colorScheme.onPrimaryContainer,
                                                    focusedIndicatorColor = MaterialTheme.colorScheme.onPrimaryContainer,
                                                    unfocusedIndicatorColor = MaterialTheme.colorScheme.onPrimaryContainer,
                                                    disabledIndicatorColor = MaterialTheme.colorScheme.onPrimaryContainer,
                                                ),
                                                singleLine = true,
                                                readOnly = false,
                                                enabled = true,
                                                textStyle = MaterialTheme.typography.bodyLarge,
                                            )
                                        }
                                        Spacer(modifier = Modifier.height(15.dp))
                                        ElevatedButton(
                                            modifier = Modifier
                                                .align(Alignment.CenterHorizontally),
                                            onClick = {
                                                if (inputValue.isNotEmpty()) {
                                                    imageUri = Uri.parse(
                                                        qrCodeApi + "data=" + inputValue
                                                    )
                                                    codeGenerated = true
                                                } else {
                                                    imageUri = null
                                                    codeGenerated = false
                                                    scope.launch {
                                                        snackbarHostState.showSnackbar(
                                                            message = "Please enter a value",
                                                            actionLabel = "OK",
                                                        )
                                                    }
                                                }
                                            }) {
                                            Text(
                                                text = "Generate Code",
                                                textAlign = TextAlign.Center,
                                                style = MaterialTheme.typography.bodyLarge
                                            )
                                        }
                                        Spacer(modifier = Modifier.height(50.dp))
                                        Text(
                                            text = "Powered By Google ML Kit",
                                            textAlign = TextAlign.Center,
                                            style = MaterialTheme.typography.bodySmall,
                                        )
                                    }
                                }
                            }
                        }
                    )
                }
            }
        }
    }
    private fun saveImageToDownloads(context: Context, uri: Uri) {
        val downloadManager = context.getSystemService(android.content.Context.DOWNLOAD_SERVICE) as DownloadManager

        val request = DownloadManager.Request(uri)
            .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
            .setTitle("codescanner_qr")
            .setDestinationInExternalPublicDir(
                Environment.DIRECTORY_DOWNLOADS,
                "codescanner_qr.png"
            )

        downloadManager.enqueue(request)
        Toast.makeText(context, "Image saved to Downloads", Toast.LENGTH_SHORT).show()
    }
}